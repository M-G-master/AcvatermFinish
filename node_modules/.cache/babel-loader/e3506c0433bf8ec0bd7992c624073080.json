{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport let Status;\n\n(function (Status) {\n  Status[\"LOADING\"] = \"loading\";\n  Status[\"SUCCESS\"] = \"success\";\n  Status[\"ERROR\"] = \"error\";\n})(Status || (Status = {}));\n\nconst initialState = {\n  items: [],\n  status: Status.LOADING // loading | success | error\n\n};\nexport const fetchPizzas = createAsyncThunk('pizza/fetchPizzasStatus', async params => {\n  const {\n    sortBy,\n    order,\n    category,\n    search,\n    currentPage\n  } = params;\n  const {\n    data\n  } = await axios.get(`https://63332597433198e79dc04b5e.mockapi.io/items?page=${currentPage}&limit=100&${category}&sortBy=${sortBy}&order=${order}${search}`);\n  return data;\n});\nconst pizzaSlice = createSlice({\n  name: 'pizza',\n  initialState,\n  reducers: {\n    setItems(state, action) {\n      state.items = action.payload;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPizzas.pending, (state, action) => {\n      state.status = Status.LOADING;\n      state.items = [];\n    });\n    builder.addCase(fetchPizzas.fulfilled, (state, action) => {\n      state.items = action.payload;\n      state.status = Status.SUCCESS;\n    });\n    builder.addCase(fetchPizzas.rejected, (state, action) => {\n      state.status = Status.ERROR;\n      state.items = [];\n    });\n  }\n});\nexport const selectPizzaData = state => state.pizza;\nexport const {\n  setItems\n} = pizzaSlice.actions;\nexport default pizzaSlice.reducer;","map":{"version":3,"names":["axios","createAsyncThunk","createSlice","Status","initialState","items","status","LOADING","fetchPizzas","params","sortBy","order","category","search","currentPage","data","get","pizzaSlice","name","reducers","setItems","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","SUCCESS","rejected","ERROR","selectPizzaData","pizza","actions","reducer"],"sources":["C:/Проэкты/AKVATERM/src/redux/slices/pizzaSlice.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\n\r\ntype Pizza = {\r\n    id: string,\r\n    title: string,\r\n    price: number,\r\n    imageUrl: string,\r\n    videoUrl: string,\r\n    sizes: number[],\r\n    types: number[],\r\n  };\r\n\r\nexport enum Status {\r\n  LOADING = 'loading',\r\n  SUCCESS = 'success',\r\n  ERROR = 'error',\r\n}\r\n\r\ninterface PizzaSliceState  {\r\n  items: Pizza[];\r\n  status: Status;\r\n}\r\n\r\nconst initialState: PizzaSliceState = {\r\n  items: [],\r\n  status: Status.LOADING, // loading | success | error\r\n};\r\n\r\nexport type SearchPizzaParams = { \r\n  sortBy: string;\r\n  order:  string;\r\n  category:  string;\r\n  search: string;\r\n  currentPage: string;\r\n}\r\n\r\nexport const fetchPizzas = createAsyncThunk<Pizza[], SearchPizzaParams>(\r\n  'pizza/fetchPizzasStatus', \r\n  async (params) => { \r\n  const { sortBy, order, category, search, currentPage } = params;\r\n  const { data } = await axios.get<Pizza[]>(\r\n    `https://63332597433198e79dc04b5e.mockapi.io/items?page=${currentPage}&limit=100&${category}&sortBy=${sortBy}&order=${order}${search}`,\r\n  );\r\n  return data \r\n});\r\n\r\nconst pizzaSlice = createSlice({\r\n  name: 'pizza',\r\n  initialState,\r\n  reducers: {\r\n    setItems(state, action: PayloadAction<Pizza[]>) {\r\n      state.items = action.payload;\r\n    },\r\n  },\r\n\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchPizzas.pending, (state, action) => {\r\n      state.status = Status.LOADING;\r\n      state.items = [];\r\n    })\r\n  \r\n    builder.addCase(fetchPizzas.fulfilled, (state, action) => {\r\n      state.items = action.payload;\r\n      state.status = Status.SUCCESS;\r\n    })\r\n  \r\n    builder.addCase(fetchPizzas.rejected, (state, action) => {\r\n      state.status = Status.ERROR;\r\n      state.items = [];\r\n    })\r\n  }\r\n});\r\n\r\nexport const selectPizzaData = (state: RootState) => state.pizza;\r\nexport const { setItems } = pizzaSlice.actions;\r\nexport default pizzaSlice.reducer;"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA6D,kBAA7D;AAaA,WAAYC,MAAZ;;WAAYA,M;EAAAA,M;EAAAA,M;EAAAA,M;GAAAA,M,KAAAA,M;;AAWZ,MAAMC,YAA6B,GAAG;EACpCC,KAAK,EAAE,EAD6B;EAEpCC,MAAM,EAAEH,MAAM,CAACI,OAFqB,CAEZ;;AAFY,CAAtC;AAaA,OAAO,MAAMC,WAAW,GAAGP,gBAAgB,CACzC,yBADyC,EAEzC,MAAOQ,MAAP,IAAkB;EAClB,MAAM;IAAEC,MAAF;IAAUC,KAAV;IAAiBC,QAAjB;IAA2BC,MAA3B;IAAmCC;EAAnC,IAAmDL,MAAzD;EACA,MAAM;IAAEM;EAAF,IAAW,MAAMf,KAAK,CAACgB,GAAN,CACpB,0DAAyDF,WAAY,cAAaF,QAAS,WAAUF,MAAO,UAASC,KAAM,GAAEE,MAAO,EADhH,CAAvB;EAGA,OAAOE,IAAP;AACD,CAR0C,CAApC;AAUP,MAAME,UAAU,GAAGf,WAAW,CAAC;EAC7BgB,IAAI,EAAE,OADuB;EAE7Bd,YAF6B;EAG7Be,QAAQ,EAAE;IACRC,QAAQ,CAACC,KAAD,EAAQC,MAAR,EAAwC;MAC9CD,KAAK,CAAChB,KAAN,GAAciB,MAAM,CAACC,OAArB;IACD;;EAHO,CAHmB;EAS7BC,aAAa,EAAGC,OAAD,IAAa;IAC1BA,OAAO,CAACC,OAAR,CAAgBlB,WAAW,CAACmB,OAA5B,EAAqC,CAACN,KAAD,EAAQC,MAAR,KAAmB;MACtDD,KAAK,CAACf,MAAN,GAAeH,MAAM,CAACI,OAAtB;MACAc,KAAK,CAAChB,KAAN,GAAc,EAAd;IACD,CAHD;IAKAoB,OAAO,CAACC,OAAR,CAAgBlB,WAAW,CAACoB,SAA5B,EAAuC,CAACP,KAAD,EAAQC,MAAR,KAAmB;MACxDD,KAAK,CAAChB,KAAN,GAAciB,MAAM,CAACC,OAArB;MACAF,KAAK,CAACf,MAAN,GAAeH,MAAM,CAAC0B,OAAtB;IACD,CAHD;IAKAJ,OAAO,CAACC,OAAR,CAAgBlB,WAAW,CAACsB,QAA5B,EAAsC,CAACT,KAAD,EAAQC,MAAR,KAAmB;MACvDD,KAAK,CAACf,MAAN,GAAeH,MAAM,CAAC4B,KAAtB;MACAV,KAAK,CAAChB,KAAN,GAAc,EAAd;IACD,CAHD;EAID;AAxB4B,CAAD,CAA9B;AA2BA,OAAO,MAAM2B,eAAe,GAAIX,KAAD,IAAsBA,KAAK,CAACY,KAApD;AACP,OAAO,MAAM;EAAEb;AAAF,IAAeH,UAAU,CAACiB,OAAhC;AACP,eAAejB,UAAU,CAACkB,OAA1B"},"metadata":{},"sourceType":"module"}